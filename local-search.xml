<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java List 与地址相关的一点坑</title>
    <link href="/2022/04/03/Java-List-%E4%B8%8E%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E7%82%B9%E5%9D%91/"/>
    <url>/2022/04/03/Java-List-%E4%B8%8E%E5%9C%B0%E5%9D%80%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E7%82%B9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-踩坑系列-（一）List"><a href="#Java-踩坑系列-（一）List" class="headerlink" title="Java 踩坑系列 （一）List"></a>Java 踩坑系列 （一）List</h1><span id="more"></span><h2 id="踩坑过程"><a href="#踩坑过程" class="headerlink" title="踩坑过程"></a>踩坑过程</h2><p>今天刷回溯法  <a href="https://leetcode-cn.com/problems/combinations/">leetcode-77-组合</a>  的时候。</p><p>因为返回值是 <strong>  List&lt;List&lt;Integer&gt;&gt;</strong>，所以可以使用一个 <strong>List&lt;Integer&gt;</strong> 的对象来进行回溯。于是我想当然的写出了以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTracking</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, List&lt;Integer&gt; temp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (temp.size() == k) &#123; <span class="hljs-comment">//当temp的size已经是k时，加入到ans中，退出</span><br>            ans.add(temp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= n; i++) &#123; <span class="hljs-comment">//因为不考虑重复的&#123;「1，2」和「2，1」算重复，这里还没有剪枝</span><br>            temp.add(i);<br>            backTracking(i + <span class="hljs-number">1</span>, n, k, temp); <span class="hljs-comment">//回溯</span><br>            temp.remove(temp.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">//回溯完，往上</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combine</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        List&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//</span><br>        backTracking(<span class="hljs-number">1</span>, n, k, temp);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        List&lt;List&lt;Integer&gt;&gt; combine = solution.combine(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>);<br>        System.out.println(combine);<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果运行的时候，出来的结果是这样的</p><blockquote><p>[[], [], [], [], [], []]</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><strong>分析结果：</strong>返回值是规模是正确的，但是里面的值全都神秘消失了。</p><p>  我调试了一遍程序，发现每一轮 <em>temp</em> 都被顺利加入到了 <em>ans</em> 中。但是当我对 <em>temp</em> 进行回溯时，会移除前一步中加入的元素，此时 <em>ans</em> 里加入的 <em>temp</em> 也发生了变化！<mark color='g'>实际上，在这段代码里 <em>ans</em> 中的每个子元素都指向 <em>temp</em>。因此当 <em>temp</em> 变化时，<em>ans</em> 里的每个元素也发生了变化。</mark>最后的回溯将 <em>temp</em> 清空了，所以也就出现了上面的情况。于是对代码稍做修改，答案就正确了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTracking</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, List&lt;Integer&gt; temp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (temp.size() == k) &#123; <span class="hljs-comment">//当temp的size已经是k时，加入到ans中，退出</span><br>        List&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(temp);<br>        ans.add(cur);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= n; i++) &#123; <span class="hljs-comment">//因为不考虑重复的&#123;「1，2」和「2，1」算重复，这里还没有剪枝</span><br>        temp.add(i);<br>        backTracking(i + <span class="hljs-number">1</span>, n, k, temp); <span class="hljs-comment">//回溯</span><br>        temp.remove(temp.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">//回溯完，往上</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combine</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>    List&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>    backTracking(<span class="hljs-number">1</span>, n, k, temp);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]</p></blockquote><p>最后对第 8 行稍做修改，实现剪枝操作，就能较快的 AC 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= n - (k - temp.size()) + <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-comment">//因为不考虑重复的&#123;「1，2」和「2，1」算重复</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
      <category>Java踩坑系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/29/hello-world/"/>
    <url>/2022/03/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
